#! /bin/bash

# SmoothWall Build system.
#
# Parts (c) SmoothWall Ltd 2005
# Parts (c) Neal P. Murphy, 2009
#
# This code is distributed under the terms of the GPL v2.


# function adjust()
#   perform the specific tool chain adjustment and check to be sure it was done right

function adjust()
{
  if [ -e "crumbs/${BUILD_PHASE}.adjusted" ]; then
    echo "    (${BUILD_PHASE}) adjustment already made"
  else
    echo "    adjusting tool chain, ${BUILD_PHASE}"
    ( docommand "adjusting stage $1" "bash stage$1_tc_adjustment") \
          > crumbs/${BUILD_PHASE}.adjusting.out 2>&1
    status=$?
    if [ $status -eq 0 ]; then
      touch crumbs/${BUILD_PHASE}.adjusted
    else
      exit 1
    fi
  fi
}


# function build()
#   Compile the specified module for the final build, and be tidy about it.
#   $1 -> package; $2 -> target (optional)

function build()
{
  #set -x
  export PKG_ROOT="$PKG_ROOT_PATH/$1"
  if [ -n "$2" ]; then
    TGT="-$2"
    TGTP=" ($2)"
  else
    TGT=""
    TGTP=""
  fi
  if [ -e "sources/$1/$BUILD_PHASE$TGT.built" ]; then
    echo "    $1$TGTP already built"
  else
    echo "    $1$TGTP: PKG_ROOT:$PKG_ROOT"
    ( docommand "$1::$2" "make -C sources/$1 $2") > sources/$1/$BUILD_PHASE$TGT.out 2>&1
    status=$?
    if [ $status -eq 0 ]; then
      touch sources/$1/$BUILD_PHASE$TGT.built
    else
      exit 1
    fi
  fi
  #set +x
}


# function buildenv()
#   Compile the specified module for the tool chain, and be tidy about it.

function buildenv()
{
  if [ -e "sources/$1/$BUILD_PHASE.built" ]; then
    echo "    $1 already built"
  else
    echo "    $1"
    ( docommand "$1" "make -C sources/$1 BUILDENV=$2 clean install") > sources/$1/$BUILD_PHASE.out 2>&1
    status=$?
    if [ $status -eq 0 ]; then
      touch sources/$1/$BUILD_PHASE.built
    else
      exit 1
    fi
  fi
}


# function build_tc_stage_1()
#   Build the first stage of the tool chain, and make the adjustments

function build_tc_stage_1() {
  export BUILD_PHASE="Stage_1"
  set_build_environment

  export JOBS=$JOBS_MP 
  buildenv binutils 1
  buildenv gcc 1
  buildenv kernel-headers 1
  buildenv glibc 1
  adjust 1
}


# function build_tc_stage_2()
#   Build the second stage of the tool chain, and make the adjustments

function build_tc_stage_2() {
  export BUILD_PHASE="Stage_2"
  set_build_environment

  export JOBS=$JOBS_MP
  buildenv binutils 2
  buildenv gcc 2
  check 2 gcc
}


# function build_tc_stage_3()
#   Build the third (last) stage of the tool chain

function build_tc_stage_3() {
  export BUILD_PHASE="Stage_3"
  set_build_environment

  export JOBS=$JOBS_MP
  buildenv tcl 1
  buildenv expect 1
  buildenv dejagnu 1
  buildenv ncurses 1
  buildenv flex 1
  buildenv bash 1
  buildenv xz 1
  buildenv bzip2 1
  buildenv coreutils 1
  buildenv diffutils 1 
  buildenv e2fsprogs 1 
  buildenv findutils 1
  buildenv gawk 1
  buildenv gettext 1
  buildenv grep 1
  buildenv gzip 1
  buildenv joe 1
  buildenv m4 1
  buildenv make 1
  buildenv patch 1
  buildenv perl 1
  buildenv sed 1
  buildenv tar 1
  buildenv texinfo 1
  buildenv util-linux 1
  buildenv wget 1
}


# function check()
#   perform the specific tool chain check to be sure it was done right

function check()
{
  if [ -e "crumbs/${BUILD_PHASE}_${2}.checked" ]; then
    echo "    ${BUILD_PHASE} $2 already checked"
  else
      echo "    checking tool chain, ${BUILD_PHASE}"
      ( docommand "checking ${BUILD_PHASE} ${2}" "bash stage${1}_${2}_check") \
            > crumbs/${BUILD_PHASE}_${2}_check.out 2>&1
    status=$?
    if [ $status -eq 0 ]; then
      touch crumbs/${BUILD_PHASE}_${2}.checked
    else
      exit 1
    fi
  fi
}


# function cpu_count()
#   Figure out how many CPUs we have (real or HT).

function cpu_count() {
  typeset -i phy_max cor_max cores cpus

  if egrep -i "^physical id" /proc/cpuinfo; then
    phy_max=`egrep -i "^physical id" /proc/cpuinfo|sed -e 's/.*: //'|sort|tail -1`+1
    cor_max=`egrep -i "^core id" /proc/cpuinfo|sed -e 's/.*: //'|sort|tail -1`+1
    cpus=`egrep -i "^processor" /proc/cpuinfo|sed -e 's/.*: //'|sort|tail -1`+1
    cores=cor_max*phy_max
  else
    cores=`grep processor /proc/cpuinfo|wc -l`
  fi

  JOBS_MP="-j $cores"

  unset phy_max cor_max cores cpus
}


# function do_command()

function docommand() {
  #set -x
  echo "= Running: $1 ======================================"
  $2;
  status=$?
  if [ $status != 0 ]; then
    echo "Failed:">/proc/self/fd/0
    echo "Failed:"
    if [ -f "sources/$1/$BUILD_PHASE.out" ]; then
      (
        tail sources/$1/$BUILD_PHASE.out | sed -e 's/^/      /'
      ) >/proc/self/fd/0
    fi
    echo "$1 FAILED" >/proc/self/fd/0
    echo "$1 FAILED"
    exit $status
  else
    echo "$1 success"
  fi
  echo
  #set +x
}


# function mso ()
#   Turn inverse video on/off; patterned on 'tput smso/rmso'

function mso () {
  ESC="\e"
  SMSO="[7m"
  RMSO="[0m"
  if [ "$1" == "ON" ]; then
    echo -ne "$ESC$SMSO"
  else
    echo -ne "$ESC$RMSO"
  fi
}


# function other_cmd()
#   Execute a non-compile command

other_cmd()
{
  if [ -e "$1" ]; then
    echo "    $2 already done"
  else
    if [ "$BUILD_PHASE" == "Final" ]; then
      export PKG_ROOT="$PKG_ROOT_PATH/other"
      echo "    $2: PKG_ROOT:$PKG_ROOT"
    else
      echo "    $2"
    fi
    if [ "$5" == "tee" ]; then
      ( docommand "$2" "$3") 2>&1 | /usr/bin/tee "$4"
    else
      ( docommand "$2" "$3") > "$4" 2>&1
    fi
    
    status=$?
    if [ $status -eq 0 ]; then
      touch "$1" ;
    else
      exit 1
    fi
  fi
}


# function prepare_final_tree()
#   Prepare the root tree for the final build
#

function prepare_final_tree() {
  # SmoothWall Build system.
  #
  # Parts (c) SmoothWall Ltd 2005
  # Parts (c) Neal P. Murphy 2009
  #
  # This code is distributed under the terms of the GPL v2.

  # Creates files needed to start the building of the tree.

  # Basic parts of the working tree
  rm -rf /bin /lib /root /sbin /tmp /usr /var /etc /dev /proc
  mkdir -pv /bin /lib /root /sbin /tmp /usr /usr/bin /usr/include /usr/lib /var
  mkdir -pv /etc /dev /proc /build/target/isos /build/buildroot/other

  # Permissions
  chmod -v 700 /root
  chmod -v 1777 /tmp

  # Temporary stuff - just needed to compile up the working tree
  mknod /dev/null c 1 3
  mknod /dev/tty c 5 1
  mknod /dev/urandom c 1 9
  ln -sv /tools/bin/sh /bin/sh 2>/dev/null
  ln -sv /tools/bin/{bash,cat,echo,grep,pwd,stty} /bin
  ln -sv /tools/bin/perl /usr/bin
  ln -sv /tools/lib/libgcc_s.so{,.1} /usr/lib
  ln -sv /tools/lib/libstdc++.so{,.6} /usr/lib

  # Get some vital files using the SWE coretree
  cp -avR /build/sources/coretree/tree/etc/passwd /etc/passwd
  cp -avR /build/sources/coretree/tree/etc/group /etc/group
  cp -avR /build/sources/coretree/tree/etc/ld.so.conf /etc/ld.so.conf
  rm -f /etc/localtime
  ln -sv /usr/share/zoneinfo/Europe/London /etc/localtime
  cp -v /build/crumbs/resolv.conf /etc/

  > /etc/mtab

  cat >/root/.profile <<END 
HOME=/root
TERM=$TERM
PS1='\u:\w\# '
PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin

set +h
END
}
